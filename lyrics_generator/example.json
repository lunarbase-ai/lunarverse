{
  "id": "90f82089-c355-46f2-9a68-f4388e84eb3b",
  "userId": "si5126lj-s@student.lu.se",
  "name": "Song Generator",
  "description": "A workflow generating a song. Generates lyrics with OpenAI GPT-4, and uses Suno to generate a song from the lyrics.",
  "version": null,
  "components": [
    {
      "id": "33cc36ef-d128-461e-817b-4f05b7590de6",
      "workflowId": "90f82089-c355-46f2-9a68-f4388e84eb3b",
      "name": "Lyrics Generator",
      "className": "LyricsGenerator",
      "description": "Generates song lyrics from an inputted theme using Azure OpenAI's API (an LLM).\nInputs:\n  `Theme` (str): The theme of the song, e.g. `love`.\n  `Mood` (str): The mood of the song, e.g. `happy`.\n  `Setting` (str): The setting of the song, e.g. `New York`.\n  `Key words` (List[str]): Key words in the lyrics, e.g. `[`sunshine`, `forever`]`\n  `Other instructions` (str): Other instructions for the generation, e.g. `Each verse should have six lines`\nOutput (str): The lyrics generated by the LLM.",
      "group": "Music",
      "inputs": [
        {
          "key": "Theme",
          "dataType": "TEXT",
          "value": "Space Exploration",
          "templateVariables": {},
          "componentId": "33cc36ef-d128-461e-817b-4f05b7590de6"
        },
        {
          "key": "Mood",
          "dataType": "TEXT",
          "value": "Adventureous",
          "templateVariables": {},
          "componentId": "33cc36ef-d128-461e-817b-4f05b7590de6"
        },
        {
          "key": "Setting",
          "dataType": "TEXT",
          "value": "Space ship far away from earth",
          "templateVariables": {},
          "componentId": "33cc36ef-d128-461e-817b-4f05b7590de6"
        },
        {
          "key": "Key words",
          "dataType": "LIST",
          "value": [
            "Space",
            "Astronaut",
            "Gravity",
            "Black hole"
          ],
          "templateVariables": {},
          "componentId": "33cc36ef-d128-461e-817b-4f05b7590de6"
        },
        {
          "key": "Other instructions",
          "dataType": "TEXT",
          "value": "Should give an understanding how small we are in universe. Should also contain some humor.",
          "templateVariables": {},
          "componentId": "33cc36ef-d128-461e-817b-4f05b7590de6"
        }
      ],
      "output": {
        "dataType": "TEXT",
        "value": ":undef:"
      },
      "label": "LYRICSGENERATOR-0",
      "configuration": {
        "force_run": false,
        "openai_api_version": "2024-02-01",
        "deployment_name": "lunar-chatgpt-4o",
        "openai_api_key": "",
        "azure_endpoint": ""
      },
      "version": null,
      "isCustom": false,
      "isTerminal": false,
      "position": {
        "x": 153,
        "y": 130
      },
      "timeout": 600,
      "componentCode": "lyrics_generator/lyrics_generator/__init__.py",
      "componentCodeRequirements": [
        "langchain"
      ],
      "componentExamplePath": "lyrics_generator/lyrics_generator/example.json",
      "invalidErrors": []
    },
    {
      "id": "14e0c456-ff51-4f44-951e-38d9419a396e",
      "workflowId": "90f82089-c355-46f2-9a68-f4388e84eb3b",
      "name": "Suno Music Downloader",
      "className": "SunoMusicDownloader",
      "description": "Downloads songs from Suno.\nInputs:\n  `Song IDs` (List[str]): A list of the IDs of the songs to download, e.g. `[`6f4b42b8-9c48-4dde-91e3-c79a23cad679`, `95e66c84-9b31-4adc-8ddf-35d32eef0643`]`.\nOutput (Dict[str, Dict]): A dictionary with each inputted song ID mapped to a dict with data about the song, including the keys `title` (mapped to the title (str)) and `file_path` (mapped to the server path of the downloaded mp3 file (str)).\nNOTE: this component assumes that the suno api (https://github.com/gcui-art/suno-api) has been downloaded and started locally\n",
      "group": "Music",
      "inputs": [
        {
          "key": "Song IDs",
          "dataType": "LIST",
          "value": [],
          "templateVariables": {},
          "componentId": "14e0c456-ff51-4f44-951e-38d9419a396e"
        }
      ],
      "output": {
        "dataType": "JSON",
        "value": ":undef:"
      },
      "label": "SUNOMUSICDOWNLOADER-1",
      "configuration": {
        "force_run": false,
        "suno_api_base_url": "http://localhost:3000"
      },
      "version": null,
      "isCustom": false,
      "isTerminal": false,
      "position": {
        "x": 1180.306113557044,
        "y": 125.8266711409403
      },
      "timeout": 600,
      "componentCode": "suno_music_downloader/suno_music_downloader/__init__.py",
      "componentCodeRequirements": [],
      "componentExamplePath": "suno_music_downloader/suno_music_downloader/example.json",
      "invalidErrors": []
    },
    {
      "id": "a8cdf189-73ae-4819-b82c-652be04e869b",
      "workflowId": "90f82089-c355-46f2-9a68-f4388e84eb3b",
      "name": "Suno Music Generator",
      "className": "SunoMusicGenerator",
      "description": "Generates music using Suno.\nInputs:\n  `Title` (str): The title of the song, e.g. `Blinding Lights`.\n  `Lyrics` (str): The lyrics of the song e.g. `[Verse 1]I have been tryna call, I have been on my own for long enough, ..., [Chorus]..., ...`.\n  `Genres` (List[str]): The genres of the song, e.g. `[`rock`, `indie`]`.\n  `Tempo` (str): The tempo of the song, e.g. `171 BPM`, `adagio`, `moderato`, `allegro`, etc. (also `slow`, `fast`, etc. works)\n  `Instruments` (List[str]): The instruments mood of the song, e.g. `[`piano`, `guitar`]`.\n  `Other instructions` (str): Other instructions for the generation, e.g. `Keep the outro short`.\nOutput (List[str]): A list of the ID's of the generated songs (normally, two songs are generated).\nNOTE: this component assumes that the suno api (https://github.com/gcui-art/suno-api) has been downloaded and started locally\n",
      "group": "Music",
      "inputs": [
        {
          "key": "Title",
          "dataType": "TEXT",
          "value": "Space Exploration",
          "templateVariables": {},
          "componentId": "a8cdf189-73ae-4819-b82c-652be04e869b"
        },
        {
          "key": "Lyrics",
          "dataType": "TEXT",
          "value": ":undef:",
          "templateVariables": {},
          "componentId": "a8cdf189-73ae-4819-b82c-652be04e869b"
        },
        {
          "key": "Genres",
          "dataType": "LIST",
          "value": [
            "pop"
          ],
          "templateVariables": {},
          "componentId": "a8cdf189-73ae-4819-b82c-652be04e869b"
        },
        {
          "key": "Tempo",
          "dataType": "TEXT",
          "value": "-",
          "templateVariables": {},
          "componentId": "a8cdf189-73ae-4819-b82c-652be04e869b"
        },
        {
          "key": "Instruments",
          "dataType": "LIST",
          "value": [
            "-"
          ],
          "templateVariables": {},
          "componentId": "a8cdf189-73ae-4819-b82c-652be04e869b"
        },
        {
          "key": "Other instructions",
          "dataType": "TEXT",
          "value": "Should sound adventurous but also give a small feeling of loneliness.",
          "templateVariables": {},
          "componentId": "a8cdf189-73ae-4819-b82c-652be04e869b"
        }
      ],
      "output": {
        "dataType": "LIST",
        "value": ":undef:"
      },
      "label": "SUNOMUSICGENERATOR-2",
      "configuration": {
        "force_run": false,
        "suno_api_base_url": "http://localhost:3000"
      },
      "version": null,
      "isCustom": false,
      "isTerminal": false,
      "position": {
        "x": 685.110396375838,
        "y": 124.4549378523497
      },
      "timeout": 600,
      "componentCode": "suno_music_generator/suno_music_generator/__init__.py",
      "componentCodeRequirements": [],
      "componentExamplePath": "suno_music_generator/suno_music_generator/example.json",
      "invalidErrors": []
    },
    {
      "id": "627c6330-44e9-4de9-9685-0944360cbf9f",
      "workflowId": "90f82089-c355-46f2-9a68-f4388e84eb3b",
      "name": "Python coder",
      "className": "PythonCoder",
      "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
      "group": "Coders",
      "inputs": [
        {
          "key": "Code",
          "dataType": "CODE",
          "value": "\"\"\"\nRetrieves the file_path to the Suno audio file for each song_id.\n\"\"\"\n\nimport json\n\nsongs_data = {songs_data}\nresult = {}\nfor song_id, song_data in songs_data.items():\n  file_path = song_data.get('file_path')\n  result[song_id] = file_path",
          "templateVariables": {
            "Code.songs_data": ":undef:"
          },
          "componentId": "627c6330-44e9-4de9-9685-0944360cbf9f"
        }
      ],
      "output": {
        "dataType": "ANY",
        "value": ":undef:"
      },
      "label": "PYTHONCODER-3",
      "configuration": {
        "force_run": false,
        "openai_api_key": "",
        "openai_api_base": ""
      },
      "version": null,
      "isCustom": false,
      "isTerminal": true,
      "position": {
        "x": 1636.5828556175043,
        "y": 129.0286644991531
      },
      "timeout": 600,
      "componentCode": "python_coder/python_coder/__init__.py",
      "componentCodeRequirements": [],
      "componentExamplePath": "python_coder/python_coder/example.json",
      "invalidErrors": []
    }
  ],
  "dependencies": [
    {
      "componentInputKey": "Lyrics",
      "sourceLabel": "LYRICSGENERATOR-0",
      "targetLabel": "SUNOMUSICGENERATOR-2",
      "templateVariableKey": null
    },
    {
      "componentInputKey": "Song IDs",
      "sourceLabel": "SUNOMUSICGENERATOR-2",
      "targetLabel": "SUNOMUSICDOWNLOADER-1",
      "templateVariableKey": null
    },
    {
      "componentInputKey": "Code",
      "sourceLabel": "SUNOMUSICDOWNLOADER-1",
      "targetLabel": "PYTHONCODER-3",
      "templateVariableKey": "Code.songs_data"
    }
  ],
  "timeout": 3600,
  "autoComponentSpacing": {
    "dx": 450.0,
    "dy": 350.0,
    "x0": 0.0,
    "y0": 0.0
  },
  "invalidErrors": []
}